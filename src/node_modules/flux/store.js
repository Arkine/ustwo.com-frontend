import {EventEmitter} from 'events';
import fetcher from '_lib/fetcher';
import Pluralize from 'pluralize';
import CamelCase from 'lodash/string/camelCase'

import Nulls from 'flux/nulls';

let _data = Object.assign({}, data);

const _state = Object.assign({
  page: Nulls.page,
  modal: Nulls.modal,
  takeover: Nulls.takeover,
  colours: Nulls.colours,
  pages: Nulls.pages,
  caseStudy: Nulls.caseStudy
}, _data);
if(window.localStorage.getItem('takeover-'+_state.takeover.id)) {
  _state.takeover = Nulls.takeover;
}

const Store = Object.assign({}, EventEmitter.prototype, {
  getData() {
    return _state;
  },
  loadData(required) {
    required.forEach((params) => {
      Store.load(params.namespace, params.type, params.id);
    });
  },
  load(namespace, type, id) {
    const itemInStore = _state[type];

    if (!(itemInStore && itemInStore.id === id)) {
      console.log('Loading...', type, (id || ''));

      fetcher({
        namespace: namespace,
        url: type + (id ? '/'+id : ''),
        success: (data) => {
          Store.applyData(CamelCase(id ? Pluralize(type, 1) : type), data);
        }
      });
    } else {
      console.log('Already loaded', namespace, type, (id || ''));
      Store.emitChange();
    }
  },
  applyData(type, data) {
    _state[type] = Object.assign(_state[type] || {}, data);
    console.log('Loaded', type, _state[type]);
    Store.emitChange();
  },
  emitChange() {
    console.log('Store.emitChange', _state);
    Store.emit('change');
  },
  addChangeListener(callback) {
    Store.on('change', callback);
  },
  removeChangeListener(callback) {
    Store.removeListener('change', callback);
  }
});

window.Store = Store;

export default {
  init: Store.init,
  getData: Store.getData,
  loadData: Store.loadData,
  emitChange: Store.emitChange,
  addChangeListener: Store.addChangeListener,
  removeChangeListener: Store.removeChangeListener,

  setPage(newPage) {
    _state.page = newPage;
  },
  showContacts() {
    _state.modal = 'contacts';
  },
  closeTakeover() {
    window.localStorage.setItem('takeover-'+_state.takeover.id, true);
    _state.takeover = Nulls.takeover;
  },
  closeModal() {
    _state.modal = Nulls.modal;
  }
};
